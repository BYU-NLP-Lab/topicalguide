static struct system_word vocab[80+1] = {
  { 0, (byte *)"", 80+1},

  { 1, (byte *)"$",             c_dollar },
  { 1, (byte *)"(",             c_bra },
  { 1, (byte *)")",             c_ket },
  { 1, (byte *)"*",             c_multiply },
  { 1, (byte *)"+",             c_plus },
  { 1, (byte *)"-",             c_minus },
  { 1, (byte *)"/",             c_divide },
  { 1, (byte *)"<",             c_ls },
  { 1, (byte *)"=",             c_assign },
  { 1, (byte *)">",             c_gr },
  { 1, (byte *)"?",             c_debug },
  { 1, (byte *)"[",             c_leftslice },
  { 1, (byte *)"]",             c_rightslice },
  { 2, (byte *)"!=",            c_ne },
  { 2, (byte *)"*=",            c_multiplyassign },
  { 2, (byte *)"+=",            c_plusassign },
  { 2, (byte *)"-=",            c_minusassign },
  { 2, (byte *)"->",            c_sliceto },
  { 2, (byte *)"/*",            c_comment2 },
  { 2, (byte *)"//",            c_comment1 },
  { 2, (byte *)"/=",            c_divideassign },
  { 2, (byte *)"<+",            c_insert },
  { 2, (byte *)"<-",            c_slicefrom },
  { 2, (byte *)"<=",            c_le },
  { 2, (byte *)"==",            c_eq },
  { 2, (byte *)"=>",            c_assignto },
  { 2, (byte *)">=",            c_ge },
  { 2, (byte *)"as",            c_as },
  { 2, (byte *)"do",            c_do },
  { 2, (byte *)"or",            c_or },
  { 3, (byte *)"and",           c_and },
  { 3, (byte *)"for",           c_for },
  { 3, (byte *)"get",           c_get },
  { 3, (byte *)"hex",           c_hex },
  { 3, (byte *)"hop",           c_hop },
  { 3, (byte *)"non",           c_non },
  { 3, (byte *)"not",           c_not },
  { 3, (byte *)"set",           c_set },
  { 3, (byte *)"try",           c_try },
  { 4, (byte *)"fail",          c_fail },
  { 4, (byte *)"goto",          c_goto },
  { 4, (byte *)"loop",          c_loop },
  { 4, (byte *)"next",          c_next },
  { 4, (byte *)"size",          c_size },
  { 4, (byte *)"test",          c_test },
  { 4, (byte *)"true",          c_true },
  { 5, (byte *)"among",         c_among },
  { 5, (byte *)"false",         c_false },
  { 5, (byte *)"limit",         c_limit },
  { 5, (byte *)"unset",         c_unset },
  { 6, (byte *)"atmark",        c_atmark },
  { 6, (byte *)"attach",        c_attach },
  { 6, (byte *)"cursor",        c_cursor },
  { 6, (byte *)"define",        c_define },
  { 6, (byte *)"delete",        c_delete },
  { 6, (byte *)"gopast",        c_gopast },
  { 6, (byte *)"insert",        c_insert },
  { 6, (byte *)"maxint",        c_maxint },
  { 6, (byte *)"minint",        c_minint },
  { 6, (byte *)"repeat",        c_repeat },
  { 6, (byte *)"sizeof",        c_sizeof },
  { 6, (byte *)"tomark",        c_tomark },
  { 7, (byte *)"atleast",       c_atleast },
  { 7, (byte *)"atlimit",       c_atlimit },
  { 7, (byte *)"decimal",       c_decimal },
  { 7, (byte *)"reverse",       c_reverse },
  { 7, (byte *)"setmark",       c_setmark },
  { 7, (byte *)"strings",       c_strings },
  { 7, (byte *)"tolimit",       c_tolimit },
  { 8, (byte *)"booleans",      c_booleans },
  { 8, (byte *)"integers",      c_integers },
  { 8, (byte *)"routines",      c_routines },
  { 8, (byte *)"setlimit",      c_setlimit },
  { 9, (byte *)"backwards",     c_backwards },
  { 9, (byte *)"externals",     c_externals },
  { 9, (byte *)"groupings",     c_groupings },
  { 9, (byte *)"stringdef",     c_stringdef },
  { 9, (byte *)"substring",     c_substring },
 { 12, (byte *)"backwardmode",  c_backwardmode },
 { 13, (byte *)"stringescapes", c_stringescapes }
};
